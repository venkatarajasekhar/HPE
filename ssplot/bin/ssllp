#!/usr/bin/env python3

"""
 * Copyright (c) 2012-2016, Nic McDonald
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * - Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * - Neither the name of prim nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
"""

import argparse
import os
import ssplot
import sys

import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt


def main(args):
  stats = []
  for stat in args.stats:
    if args.verbose:
      print('parsing {0}'.format(stat))
    stats.append(ssplot.GridStats(stat))

  llstats = ssplot.LoadLatencyStats(
    args.start, args.stop, args.step, stats, verbose=args.verbose, row=args.row)

  if args.ibounds:
    llstats.bounds.readFile(args.ibounds)

  if args.verbose:
    print('plotting to {0} with title "{1}"'.format(args.filename, args.title))
  llstats.plotAll(plt, args.filename, title=args.title,
                  ymin=args.ymin, ymax=args.ymax)

  if args.obounds:
    llstats.bounds.writeFile(args.obounds)

  return 0

if __name__ == '__main__':
  ap = argparse.ArgumentParser()
  ap.add_argument('filename', type=str,
                  help='output plot file')
  ap.add_argument('start', type=float,
                  help='starting load value')
  ap.add_argument('stop', type=float,
                  help='stopping load value (exclusive)')
  ap.add_argument('step', type=float,
                  help='load step size')
  ap.add_argument('stats', metavar='F', type=str, nargs='+',
                  help='stats file to parse')

  ap.add_argument('--title', default='',
                  help='plot title')
  ap.add_argument('--ibounds', default=None,
                  help='bounds input file')
  ap.add_argument('--obounds', default=None,
                  help='bounds output file')

  ap.add_argument('--ymin', type=float, default=float('NaN'),
                  help='latency Y-axis minimum')
  ap.add_argument('--ymax', type=float, default=float('NaN'),
                  help='latency Y-axis maximum')

  ap.add_argument('--verbose', action='store_true',
                  help='print more info to output')
  ap.add_argument('--row', default='Packet',
                  choices=['Packet', 'Message'],
                  help='chooses whether to analyze packets or messages')
  args = ap.parse_args()
  sys.exit(main(args))
