/*
 * Copyright (c) 2016, Hewlett-Packard Laboratories, Qi Li
 * See LICENSE file for details
 */
#include "network/hierarchicalhyperx/ValiantRoutingAlgorithm.h"

#include <strop/strop.h>
#include <cassert>
#include <unordered_set>
#include <set>
#include "types/Packet.h"
#include "types/Message.h"

namespace HierarchicalHyperX {

ValiantRoutingAlgorithm::ValiantRoutingAlgorithm(
    const std::string& _name, const Component* _parent, u64 _latency,
    Router* _router, u32 _numVcs,
    const std::vector<u32>& _globalDimensionWidths,
    const std::vector<u32>& _globalDimensionWeights,
    const std::vector<u32>& _localDimensionWidths,
    const std::vector<u32>& _localDimensionWeights,
    u32 _concentration, u32 _globalLinksPerRouter, bool _allVcs)
  : DimOrderRoutingAlgorithm(_name, _parent,
    _latency, _router, _numVcs, _globalDimensionWidths,
    _globalDimensionWeights, _localDimensionWidths, _localDimensionWeights,
    _concentration, _globalLinksPerRouter, _allVcs) {}

ValiantRoutingAlgorithm::~ValiantRoutingAlgorithm() {}

void ValiantRoutingAlgorithm::processRequest(
    Flit* _flit, RoutingAlgorithm::Response* _response) {
  // ex: [1,...,m,1,...,n]
  const std::vector<u32>& routerAddress = router_->getAddress();
  // ex: [c,1,...,m,1,...,n]
  const std::vector<u32>* destinationAddress =
      _flit->getPacket()->getMessage()->getDestinationAddress();
  // intermediate address info
  const std::vector<u32>* intermediateAddress =
    _flit->getIntermediateDst();

  dbgprintf("Router address is %s \n",
         strop::vecString<u32>(routerAddress).c_str());
  dbgprintf("Destination address is %s \n",
         strop::vecString<u32>(*destinationAddress).c_str());
  dbgprintf("Intermediate address is %s \n",
         strop::vecString<u32>(*intermediateAddress).c_str());
  assert(routerAddress.size() == destinationAddress->size() - 1);
  assert(routerAddress.size() == intermediateAddress->size() - 1);

  // update intermediate info for Valiant
  const std::vector<u32> intermediateRouter(intermediateAddress->begin() + 1,
                                            intermediateAddress->end());
  if (routerAddress == intermediateRouter) {
    _flit->setIntermediate(true);
  }
  bool intermediateDone = _flit->getIntermediate();
  std::unordered_set<u32> outputPorts;
  if (intermediateDone == false) {
    outputPorts = DimOrderRoutingFunction::routing(intermediateAddress);
  } else {
    // printf("set to true");
    outputPorts = DimOrderRoutingFunction::routing(destinationAddress);
  }

  assert(outputPorts.size() > 0);
  // format the response
  for (auto it = outputPorts.cbegin(); it != outputPorts.cend(); ++it) {
    u32 outputPort = *it;
    if (allVcs_) {
      // select all VCs in the output port
      for (u32 vc = 0; vc < numVcs_; vc++) {
        _response->add(outputPort, vc);
      }
    } else {
      // use the current VC
      _response->add(outputPort, _flit->getVc());
    }
  }
}

}  // namespace HierarchicalHyperX
